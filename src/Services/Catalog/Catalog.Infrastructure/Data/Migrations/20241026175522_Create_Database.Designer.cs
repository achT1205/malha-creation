// <auto-generated />
using System;
using System.Collections.Generic;
using Catalog.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241026175522_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Catalog.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Catalog.Domain.Models.Category.Name#CategoryName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");
                        });

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ComplexProperty<Dictionary<string, object>>("Image", "Catalog.Domain.Models.Collection.Image#Image", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AltText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AltText");

                            b1.Property<string>("ImageSrc")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ImageSrc");
                        });

                    b.HasKey("Id");

                    b.ToTable("Collections", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Models.ColorVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Color", "Catalog.Domain.Models.ColorVariant.Color#Color", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Color");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Slug", "Catalog.Domain.Models.ColorVariant.Slug#Slug", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Slug");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ColorVariants");

                    b.HasDiscriminator().HasValue("ColorVariant");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Catalog.Domain.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Models.Occasion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Catalog.Domain.Models.Occasion.Name#OccasionName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");
                        });

                    b.HasKey("Id");

                    b.ToTable("Occasions", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("Catalog.Domain.Models.SizeVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Catalog.Domain.Models.SizeVariant.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Currency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Quantity", "Catalog.Domain.Models.SizeVariant.Quantity#Quantity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Size", "Catalog.Domain.Models.SizeVariant.Size#Size", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Size");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ColorVariantId");

                    b.ToTable("SizeVariant");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHandmade")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("ProductTypeEnum")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("AverageRating", "Product.AverageRating#AverageRating", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("TotalRatingsCount")
                                .HasColumnType("int")
                                .HasColumnName("TotalRatingsCount");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AverageRating");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CoverImage", "Product.CoverImage#Image", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AltText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AltText");

                            b1.Property<string>("ImageSrc")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ImageSrc");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Product.Description#ProductDescription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Product.Name#ProductName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UrlFriendlyName", "Product.UrlFriendlyName#UrlFriendlyName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("UrlFriendlyName");
                        });

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasDiscriminator<string>("ProductType").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Catalog.Domain.Models.AccessoryColorVariant", b =>
                {
                    b.HasBaseType("Catalog.Domain.Models.ColorVariant");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Catalog.Domain.Models.AccessoryColorVariant.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Currency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Quantity", "Catalog.Domain.Models.AccessoryColorVariant.Quantity#Quantity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");
                        });

                    b.HasDiscriminator().HasValue("AccessoryColorVariant");
                });

            modelBuilder.Entity("Catalog.Domain.Models.ClothingColorVariant", b =>
                {
                    b.HasBaseType("Catalog.Domain.Models.ColorVariant");

                    b.HasDiscriminator().HasValue("ClothingColorVariant");
                });

            modelBuilder.Entity("Catalog.Domain.Models.AccessoryProduct", b =>
                {
                    b.HasBaseType("Product");

                    b.HasDiscriminator().HasValue("Accessory");
                });

            modelBuilder.Entity("Catalog.Domain.Models.ClothingProduct", b =>
                {
                    b.HasBaseType("Product");

                    b.HasDiscriminator().HasValue("Clothing");
                });

            modelBuilder.Entity("Catalog.Domain.Models.ColorVariant", b =>
                {
                    b.HasOne("Product", null)
                        .WithMany("ColorVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Catalog.Domain.ValueObjects.Image", "Images", b1 =>
                        {
                            b1.Property<Guid>("ColorVariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AltText")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ImageSrc")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ColorVariantId", "Id");

                            b1.ToTable("ColorVariantImages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ColorVariantId");
                        });

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Catalog.Domain.Models.SizeVariant", b =>
                {
                    b.HasOne("Catalog.Domain.Models.ClothingColorVariant", null)
                        .WithMany("SizeVariants")
                        .HasForeignKey("ColorVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.OwnsMany("Catalog.Domain.ValueObjects.CategoryId", "CategoryIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CategoryId");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("ProductCategoryIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsMany("Catalog.Domain.ValueObjects.OccasionId", "OccasionIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("OccasionId");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("ProductOccasionIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsMany("Catalog.Domain.ValueObjects.ProductReviewId", "ProductReviewIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ReviewId");

                            b1.HasKey("Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("ProductReviewIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("CategoryIds");

                    b.Navigation("OccasionIds");

                    b.Navigation("ProductReviewIds");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("ColorVariants");
                });

            modelBuilder.Entity("Catalog.Domain.Models.ClothingColorVariant", b =>
                {
                    b.Navigation("SizeVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
